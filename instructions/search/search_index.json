{
    "docs": [
        {
            "location": "/index.html", 
            "text": "Welcome to Taxi App Documentaion\n\n\nFirst of all thanks for purchasing taxi application. I hope this can help you starting your own business. This guide will walk you through the installation proccess for all three parts of app. To start this app on your server you will need a linux VPS with at least 1 GB of ram (2GB recomended). Then you will need to have a SSH client and an FTP client installed on your machine. For the SSH client i would suggest using Termius which is free and multi-platform supporting macOS, Windows \n linux.\n\n\nCopying files to server\n\n\nFor FTP client you can use anyone of the options you like and all three operating systems have one implemented in themselves too. Copy both dashboard and server folder to your server using FTP client of your choose so the final folder structure of your server would look like this:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n\u2514\u2500\u2500\u2500root/\n    \u251c\u2500\u2500\u2500dashboard/\n    \u2502   \u251c\u2500\u2500\u2500bower_components/\n    \u2502   \u251c\u2500\u2500\u2500data/\n    \u2502   \u251c\u2500\u2500\u2500images/\n    \u2502   \u251c\u2500\u2500\u2500src/\n    \u2502   \u251c\u2500\u2500\u2500bower.json\n    \u2502   \u251c\u2500\u2500\u2500index.html\n    \u2502   \u251c\u2500\u2500\u2500manifest.json\n    \u2502   \u251c\u2500\u2500\u2500polymer.json\n    \u2502   \u251c\u2500\u2500\u2500service-worker.js\n    \u2502   \u2514\u2500\u2500\u2500sw-precache-config.js\n    \u2514\u2500\u2500\u2500server/\n        \u251c\u2500\u2500\u2500libs/\n        \u251c\u2500\u2500\u2500migrations/\n        \u251c\u2500\u2500\u2500models/\n        \u251c\u2500\u2500\u2500.env\n        \u251c\u2500\u2500\u2500database.json\n        \u251c\u2500\u2500\u2500package-lock.json\n        \u251c\u2500\u2500\u2500package.json\n        \u2514\u2500\u2500\u2500server.js\n\n\n\n\n\n\nConnect to server\n\n\nConnect to your VPS linux server using address and password provided by your hosting company. Most of installation process is done through here. If you know a bit about linux servers or remember how MS-DOS commands were this will be easy but if you don't, don't worry.\n\n\n\n\nUsefull commands\n\n\ncd [dir]\n: You can enter a directory using this command. for example: \ncd dashboard\n will enter folder dashboard.\n\n\ncd ..\n: The will get you to parent directory.\n\n\nls\n: List all file \n folder names in current directory.\n\n\nnano [file]\n: A simple text editor that will come handy in the process.\n\n\n\n\n\n\n\n\nNow let's start \nserver installation\n.", 
            "title": "Introduction"
        }, 
        {
            "location": "/index.html#welcome-to-taxi-app-documentaion", 
            "text": "First of all thanks for purchasing taxi application. I hope this can help you starting your own business. This guide will walk you through the installation proccess for all three parts of app. To start this app on your server you will need a linux VPS with at least 1 GB of ram (2GB recomended). Then you will need to have a SSH client and an FTP client installed on your machine. For the SSH client i would suggest using Termius which is free and multi-platform supporting macOS, Windows   linux.", 
            "title": "Welcome to Taxi App Documentaion"
        }, 
        {
            "location": "/index.html#copying-files-to-server", 
            "text": "For FTP client you can use anyone of the options you like and all three operating systems have one implemented in themselves too. Copy both dashboard and server folder to your server using FTP client of your choose so the final folder structure of your server would look like this:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21 \u2514\u2500\u2500\u2500root/\n    \u251c\u2500\u2500\u2500dashboard/\n    \u2502   \u251c\u2500\u2500\u2500bower_components/\n    \u2502   \u251c\u2500\u2500\u2500data/\n    \u2502   \u251c\u2500\u2500\u2500images/\n    \u2502   \u251c\u2500\u2500\u2500src/\n    \u2502   \u251c\u2500\u2500\u2500bower.json\n    \u2502   \u251c\u2500\u2500\u2500index.html\n    \u2502   \u251c\u2500\u2500\u2500manifest.json\n    \u2502   \u251c\u2500\u2500\u2500polymer.json\n    \u2502   \u251c\u2500\u2500\u2500service-worker.js\n    \u2502   \u2514\u2500\u2500\u2500sw-precache-config.js\n    \u2514\u2500\u2500\u2500server/\n        \u251c\u2500\u2500\u2500libs/\n        \u251c\u2500\u2500\u2500migrations/\n        \u251c\u2500\u2500\u2500models/\n        \u251c\u2500\u2500\u2500.env\n        \u251c\u2500\u2500\u2500database.json\n        \u251c\u2500\u2500\u2500package-lock.json\n        \u251c\u2500\u2500\u2500package.json\n        \u2514\u2500\u2500\u2500server.js", 
            "title": "Copying files to server"
        }, 
        {
            "location": "/index.html#connect-to-server", 
            "text": "Connect to your VPS linux server using address and password provided by your hosting company. Most of installation process is done through here. If you know a bit about linux servers or remember how MS-DOS commands were this will be easy but if you don't, don't worry.   Usefull commands  cd [dir] : You can enter a directory using this command. for example:  cd dashboard  will enter folder dashboard.  cd .. : The will get you to parent directory.  ls : List all file   folder names in current directory.  nano [file] : A simple text editor that will come handy in the process.     Now let's start  server installation .", 
            "title": "Connect to server"
        }, 
        {
            "location": "/server/node/index.html", 
            "text": "Node.JS\n\n\nNode.JS has been used as backend of this service which gives us many advantages against it's competitors and is considered as the best choices by many tech companies for real-time services like this. Installation may vary based on different linux distro and package manager it uses but here we have the command for centOS and ubuntu which most of the times i use.\n\n\nInstalling\n\n\ncentOS\n\n\n1\n2\ncurl -sL https://rpm.nodesource.com/setup_9.x \n|\n bash -\nyum install nodejs\n\n\n\n\n\n\nubuntu\n\n\n1\n2\ncurl -sL https://deb.nodesource.com/setup_9.x \n|\n sudo -E bash -\nsudo apt-get install -y nodejs\n\n\n\n\n\n\nFor full installation guide you can preffer to \nOfficial page\n\n\nNPM\n\n\nNode Package Manger is the official package manager of node.js which we will use to install some global and internal package needed. Go to server folder and enter following commands one by one to have all the packages needed installed:\n\n\n1\n2\n3\n4\n5\nnpm install\nnpm install pm2 -g\nnpm install polymer-cli -g -unsafe-perm\nnpm install db-migrate -g\nnpm install db-migrate-mysql -g\n\n\n\n\n\n\nThese are the packages you will need for starting dashboard and server app. Let's continue to Install backend databases: \nInstalling Redis", 
            "title": "Install Node.js"
        }, 
        {
            "location": "/server/node/index.html#nodejs", 
            "text": "Node.JS has been used as backend of this service which gives us many advantages against it's competitors and is considered as the best choices by many tech companies for real-time services like this. Installation may vary based on different linux distro and package manager it uses but here we have the command for centOS and ubuntu which most of the times i use.", 
            "title": "Node.JS"
        }, 
        {
            "location": "/server/node/index.html#installing", 
            "text": "", 
            "title": "Installing"
        }, 
        {
            "location": "/server/node/index.html#centos", 
            "text": "1\n2 curl -sL https://rpm.nodesource.com/setup_9.x  |  bash -\nyum install nodejs", 
            "title": "centOS"
        }, 
        {
            "location": "/server/node/index.html#ubuntu", 
            "text": "1\n2 curl -sL https://deb.nodesource.com/setup_9.x  |  sudo -E bash -\nsudo apt-get install -y nodejs   For full installation guide you can preffer to  Official page", 
            "title": "ubuntu"
        }, 
        {
            "location": "/server/node/index.html#npm", 
            "text": "Node Package Manger is the official package manager of node.js which we will use to install some global and internal package needed. Go to server folder and enter following commands one by one to have all the packages needed installed:  1\n2\n3\n4\n5 npm install\nnpm install pm2 -g\nnpm install polymer-cli -g -unsafe-perm\nnpm install db-migrate -g\nnpm install db-migrate-mysql -g   These are the packages you will need for starting dashboard and server app. Let's continue to Install backend databases:  Installing Redis", 
            "title": "NPM"
        }, 
        {
            "location": "/server/redis/index.html", 
            "text": "Redis\n\n\nRedis is fastest in-memory key-value store solution right now. It has been used for some caching mechanism so the app would work on a faster level and under the heavy load it could perform too.\n\n\nInstallation\n\n\nYou can do the installation in any folder you like but better to choose somewhere so you would be able to cleanup easier after installation. Enter the following commands one by one. they will get you through downloading latest source code and compiling:\n\n\n1\n2\n3\n4\n5\n6\n7\nwget http://download.redis.io/redis-stable.tar.gz\ntar xvzf redis-stable.tar.gz\n\ncd\n redis-stable\nmake\nsudo make install\n\ncd\n utils\nsh install_server.sh\n\n\n\n\n\n\nThe last line will get you through a wizard like proccess that you can enter each one so default value will be used.\n\n\nSecurity\n\n\nIf you want to you can set a password for redis in the wizard and the you will have to enter that password in configuration process but it's not necessary because Redis holds some trivial info that are not important and even accessing them wouldn't be security breach.", 
            "title": "Install Redis"
        }, 
        {
            "location": "/server/redis/index.html#redis", 
            "text": "Redis is fastest in-memory key-value store solution right now. It has been used for some caching mechanism so the app would work on a faster level and under the heavy load it could perform too.", 
            "title": "Redis"
        }, 
        {
            "location": "/server/redis/index.html#installation", 
            "text": "You can do the installation in any folder you like but better to choose somewhere so you would be able to cleanup easier after installation. Enter the following commands one by one. they will get you through downloading latest source code and compiling:  1\n2\n3\n4\n5\n6\n7 wget http://download.redis.io/redis-stable.tar.gz\ntar xvzf redis-stable.tar.gz cd  redis-stable\nmake\nsudo make install cd  utils\nsh install_server.sh   The last line will get you through a wizard like proccess that you can enter each one so default value will be used.", 
            "title": "Installation"
        }, 
        {
            "location": "/server/redis/index.html#security", 
            "text": "If you want to you can set a password for redis in the wizard and the you will have to enter that password in configuration process but it's not necessary because Redis holds some trivial info that are not important and even accessing them wouldn't be security breach.", 
            "title": "Security"
        }, 
        {
            "location": "/server/mariadb/index.html", 
            "text": "MariaDB\n\n\nInstalling\n\n\nMariaDB is a branch of mySQL that was developed by some of original mySQL developers. by the time of writing this documentation the current version is 10.2 which is we need a version \n= than that because some new geographical improved functions in latest release were used in app. Use the installation guide provided for your distro in below. if you use another distro you might need to search for your own distro's installation guide.\n\n\nCentOS7\n\n\nStart by adding the MariaDB YUM repository file \nMariaDB.repo\n for CentOS systems.\n\nnano /etc/yum.repos.d/MariaDB.repo\n\nNow add the following lines to this file and save using \nCtrl+X\n as shown in bottom of terminal.\n\n\n1\n2\n3\n4\n5\n[mariadb]\n\n\nname\n \n=\n \nMariaDB\n\n\nbaseurl\n \n=\n \nhttp://yum.mariadb.org/10.1/centos7-amd64\n\n\ngpgkey\n=\nhttps://yum.mariadb.org/RPM-GPG-KEY-MariaDB\n\n\ngpgcheck\n=\n1\n\n\n\n\n\n\n\nNow do the installation using official package manager:\n\nyum install MariaDB-server MariaDB-client -y\n\nThen you should enter these two commands to have the service up and running forever:\n\n\n1\n2\nsystemctl start mariadb\nsystemctl \nenable\n mariadb\n\n\n\n\n\n\nUbuntu\n\n\nEnter following commands one by one.\n\n\n1\n2\n3\n4\n5\n6\n7\nsudo apt-get -y install software-properties-common\nsudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8\nsudo add-apt-repository \ndeb [arch=amd64,i386,ppc64el] http://ftp.utexas.edu/mariadb/repo/10.2/ubuntu xenial main\n\nsudo apt-get update\nsudo apt-get install mariadb-server mariadb-client\nsystemctl start mariadb\nsystemctl \nenable\n mariadb\n\n\n\n\n\n\nFinally\n\n\nAfter you have installed MariaDB you can go through mysql installation wizard to make it more secure and set a password for your database. remember doing this is important because without this your users info could be accessed easily by anyone. Enter following command and wizard will be started:\n\nmysql_secure_installation", 
            "title": "Install MariaDB"
        }, 
        {
            "location": "/server/mariadb/index.html#mariadb", 
            "text": "", 
            "title": "MariaDB"
        }, 
        {
            "location": "/server/mariadb/index.html#installing", 
            "text": "MariaDB is a branch of mySQL that was developed by some of original mySQL developers. by the time of writing this documentation the current version is 10.2 which is we need a version  = than that because some new geographical improved functions in latest release were used in app. Use the installation guide provided for your distro in below. if you use another distro you might need to search for your own distro's installation guide.", 
            "title": "Installing"
        }, 
        {
            "location": "/server/mariadb/index.html#centos7", 
            "text": "Start by adding the MariaDB YUM repository file  MariaDB.repo  for CentOS systems. nano /etc/yum.repos.d/MariaDB.repo \nNow add the following lines to this file and save using  Ctrl+X  as shown in bottom of terminal.  1\n2\n3\n4\n5 [mariadb]  name   =   MariaDB  baseurl   =   http://yum.mariadb.org/10.1/centos7-amd64  gpgkey = https://yum.mariadb.org/RPM-GPG-KEY-MariaDB  gpgcheck = 1    Now do the installation using official package manager: yum install MariaDB-server MariaDB-client -y \nThen you should enter these two commands to have the service up and running forever:  1\n2 systemctl start mariadb\nsystemctl  enable  mariadb", 
            "title": "CentOS7"
        }, 
        {
            "location": "/server/mariadb/index.html#ubuntu", 
            "text": "Enter following commands one by one.  1\n2\n3\n4\n5\n6\n7 sudo apt-get -y install software-properties-common\nsudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8\nsudo add-apt-repository  deb [arch=amd64,i386,ppc64el] http://ftp.utexas.edu/mariadb/repo/10.2/ubuntu xenial main \nsudo apt-get update\nsudo apt-get install mariadb-server mariadb-client\nsystemctl start mariadb\nsystemctl  enable  mariadb", 
            "title": "Ubuntu"
        }, 
        {
            "location": "/server/mariadb/index.html#finally", 
            "text": "After you have installed MariaDB you can go through mysql installation wizard to make it more secure and set a password for your database. remember doing this is important because without this your users info could be accessed easily by anyone. Enter following command and wizard will be started: mysql_secure_installation", 
            "title": "Finally"
        }, 
        {
            "location": "/server/configuration/index.html", 
            "text": "Configuration\n\n\nLooking into server folder you will find a file named \n.env\n which is the only file you need to change in this folder.\nThis file looks like this:\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\nNODE_ENV\n=\nprod\n\nMAIN_PORT\n=\n8080\n\n\nSQL_HOST\n=\nlocalhost\n\nSQL_USER\n=\nroot\n\nSQL_PASSWORD\n=\n\n\nSQL_DATABASE\n=\ntaxi\n\nREDIS_PORT\n=\n6379\n\n\nREDIS_HOST\n=\nlocalhost\n\nREDIS_PASSWORD\n=\n\n\nGOOGLE_MAPS_API_KEY\n=\n\n\nSTRIPE_SECRET_KEY\n=\n\n\nPAYMENT_CURRENCY\n=\nusd\n\nJWT_SECRET\n=\nfdsfdsfdsfdsf\n\nMAX_DRIVERS_SEND_REQUEST\n=\n10\n\n\nMAX_DISTANCE_TO_SEND_REQUEST\n=\n10000\n\n\nMINIMUM_AMOUNT_TO_REQUEST_PAYMENT\n=\n50\n\n\nPERCENT_FOR_COMPANY\n=\n30\n\n\nCASH_PAYMENT_REDUCES_DRIVER_CREDIT\n=\ntrue\n\n\nDRIVER_MIN_VERSION_IOS\n=\n1\n\n\nRIDER_MIN_VERSION_IOS\n=\n1\n\n\nDRIVER_MIN_VERSION_ANDROID\n=\n3\n\n\nRIDER_MIN_VERSION_ANDROID\n=\n3\n\n\nTEST_MODE\n=\nfalse\n\n\n\n\n\n\n\nIf you want to know what each one of these do i will explain some of them in following sections but first let's fill the mandatory ones to fill.\n\n\nImportant Parameters\n\n\nSQL_PASSWORD (Important)\n\n\nIn previous section when installing mariaDB you have set a password for your root user in mysql_secure_installation process. Enter it here.\n\n\n\n\nTip\n\n\nTo make the system more secure you can create a user and limit access of that user to the taxi database. But this will need you to have some knowledge in handling sql. As it is a little bit hard it will be leaved to user to do so if wanted too. \nSQL_USER\n, \nSQL_DATABASE\n, \nSQL_PASSWORD\n arguments help you to even connect to a remote secure database. Choice is up to you.\n\n\n\n\nGOOGLE_MAPS_API_KEY (Important)\n\n\nFor some of geographical functions Google maps has been used. The proccess of retrieving the API key from google maps dashboard has been explained in client section. You can leave this for now and remember to insert the retrieved key here.\n\n\n\n\nNote\n\n\nChanging this will logout all your users from system and they would have to login again.\n\n\n\n\nImporting database schema\n\n\nYou can do the database migration proccess easily using db-migrate which we have installed before. Do so using following commands:\n\n\n1\n2\ndb-migrate db:create taxi\ndb-migrate up\n\n\n\n\n\n\nStarting service\n\n\nNow you can start server app using this command:\n\n\n1\npm2 start server.js --name server --watch \n\n\n\n\n\n\n\n\n\nNote\n\n\nAfter each reboot you will need to enter this command again to start server application.", 
            "title": "Configuration"
        }, 
        {
            "location": "/server/configuration/index.html#configuration", 
            "text": "Looking into server folder you will find a file named  .env  which is the only file you need to change in this folder.\nThis file looks like this:   1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23 NODE_ENV = prod MAIN_PORT = 8080  SQL_HOST = localhost SQL_USER = root SQL_PASSWORD =  SQL_DATABASE = taxi REDIS_PORT = 6379  REDIS_HOST = localhost REDIS_PASSWORD =  GOOGLE_MAPS_API_KEY =  STRIPE_SECRET_KEY =  PAYMENT_CURRENCY = usd JWT_SECRET = fdsfdsfdsfdsf MAX_DRIVERS_SEND_REQUEST = 10  MAX_DISTANCE_TO_SEND_REQUEST = 10000  MINIMUM_AMOUNT_TO_REQUEST_PAYMENT = 50  PERCENT_FOR_COMPANY = 30  CASH_PAYMENT_REDUCES_DRIVER_CREDIT = true  DRIVER_MIN_VERSION_IOS = 1  RIDER_MIN_VERSION_IOS = 1  DRIVER_MIN_VERSION_ANDROID = 3  RIDER_MIN_VERSION_ANDROID = 3  TEST_MODE = false    If you want to know what each one of these do i will explain some of them in following sections but first let's fill the mandatory ones to fill.", 
            "title": "Configuration"
        }, 
        {
            "location": "/server/configuration/index.html#important-parameters", 
            "text": "", 
            "title": "Important Parameters"
        }, 
        {
            "location": "/server/configuration/index.html#sql_password-important", 
            "text": "In previous section when installing mariaDB you have set a password for your root user in mysql_secure_installation process. Enter it here.   Tip  To make the system more secure you can create a user and limit access of that user to the taxi database. But this will need you to have some knowledge in handling sql. As it is a little bit hard it will be leaved to user to do so if wanted too.  SQL_USER ,  SQL_DATABASE ,  SQL_PASSWORD  arguments help you to even connect to a remote secure database. Choice is up to you.", 
            "title": "SQL_PASSWORD (Important)"
        }, 
        {
            "location": "/server/configuration/index.html#google_maps_api_key-important", 
            "text": "For some of geographical functions Google maps has been used. The proccess of retrieving the API key from google maps dashboard has been explained in client section. You can leave this for now and remember to insert the retrieved key here.   Note  Changing this will logout all your users from system and they would have to login again.", 
            "title": "GOOGLE_MAPS_API_KEY (Important)"
        }, 
        {
            "location": "/server/configuration/index.html#importing-database-schema", 
            "text": "You can do the database migration proccess easily using db-migrate which we have installed before. Do so using following commands:  1\n2 db-migrate db:create taxi\ndb-migrate up", 
            "title": "Importing database schema"
        }, 
        {
            "location": "/server/configuration/index.html#starting-service", 
            "text": "Now you can start server app using this command:  1 pm2 start server.js --name server --watch      Note  After each reboot you will need to enter this command again to start server application.", 
            "title": "Starting service"
        }, 
        {
            "location": "/client/auth/index.html", 
            "text": "Firebase Auth\n\n\nFirebase phone authentication has been used for driver and rider's authenticatioin proccess. It provides us with free phone authentication SMS that has been localized for many countries too.\n\n\nCreate Project\n\n\nUse your own Google account or register for a new one for this app. Then go to \nfirebase console\n and Then click on add project to create a new project and fill the fields:\n\n\nEnable phone authentication\n\n\nAfter you log into Firebase choice firebase auth and enable Phone sign-in method.\n(Develop-\nAuthentication-\nSetup Sign-In method-\nPhone-\nEnable-\nSave)\n\n\n\n\n\n\n\nAdd applications\n\n\nYou will need to add two applications to dashboard for rider and driver app. To do so go to project settings.\n\n\nThen hit Add android app button.\n\n\nA dialog will be shown to you that you will need to select application Id and name of rider/driver here. There is a sha-1 key field to that we will leave empty for now.\n\n\nNow you will receive a file named google-services.json which you will need to put in the rider/driver folder.\n\n\nNow repeat this section for the other app too. (rider or driver)\nAfter finishing this both of your driver and rider folder should have a file named google-services.json in their folder.", 
            "title": "Firebase Auth"
        }, 
        {
            "location": "/client/auth/index.html#firebase-auth", 
            "text": "Firebase phone authentication has been used for driver and rider's authenticatioin proccess. It provides us with free phone authentication SMS that has been localized for many countries too.", 
            "title": "Firebase Auth"
        }, 
        {
            "location": "/client/auth/index.html#create-project", 
            "text": "Use your own Google account or register for a new one for this app. Then go to  firebase console  and Then click on add project to create a new project and fill the fields:", 
            "title": "Create Project"
        }, 
        {
            "location": "/client/auth/index.html#enable-phone-authentication", 
            "text": "After you log into Firebase choice firebase auth and enable Phone sign-in method.\n(Develop- Authentication- Setup Sign-In method- Phone- Enable- Save)", 
            "title": "Enable phone authentication"
        }, 
        {
            "location": "/client/auth/index.html#add-applications", 
            "text": "You will need to add two applications to dashboard for rider and driver app. To do so go to project settings. \nThen hit Add android app button. \nA dialog will be shown to you that you will need to select application Id and name of rider/driver here. There is a sha-1 key field to that we will leave empty for now. \nNow you will receive a file named google-services.json which you will need to put in the rider/driver folder. \nNow repeat this section for the other app too. (rider or driver)\nAfter finishing this both of your driver and rider folder should have a file named google-services.json in their folder.", 
            "title": "Add applications"
        }, 
        {
            "location": "/client/maps/index.html", 
            "text": "Google Maps\n\n\nGoogle Maps has been used for some of application functionalities. you will need to retrieve an API key from Google to have the app working.\n\n\nMaps console\n\n\nGo to \nGoogle Maps Developers Console\n and select taxi project which was created in previous section.\n\n\nEnabling APIs\n\n\nYou need to have these APIs enabled in library section one by one:\n\n Google Maps Distance Matrix API\n\n Geocoding API\n\n Google Maps Android API\n\n Google Places API for Android\n\n\n\n\nNote\n\n\nTo make this more secure you can retrieve SHA-1 or SHA-256 key of your applications and enter them here so no one other than ones who sign their app with your sign key would be able to use your API key.\n\n\n\n\nSave the API key you have retrieved for your applications. you will need it in \nnext section\n.", 
            "title": "Google Maps"
        }, 
        {
            "location": "/client/maps/index.html#google-maps", 
            "text": "Google Maps has been used for some of application functionalities. you will need to retrieve an API key from Google to have the app working.", 
            "title": "Google Maps"
        }, 
        {
            "location": "/client/maps/index.html#maps-console", 
            "text": "Go to  Google Maps Developers Console  and select taxi project which was created in previous section.", 
            "title": "Maps console"
        }, 
        {
            "location": "/client/maps/index.html#enabling-apis", 
            "text": "You need to have these APIs enabled in library section one by one:  Google Maps Distance Matrix API  Geocoding API  Google Maps Android API  Google Places API for Android   Note  To make this more secure you can retrieve SHA-1 or SHA-256 key of your applications and enter them here so no one other than ones who sign their app with your sign key would be able to use your API key.   Save the API key you have retrieved for your applications. you will need it in  next section .", 
            "title": "Enabling APIs"
        }, 
        {
            "location": "/client/config/index.html", 
            "text": "Configuration\n\n\nYou are almost finished and ready to compile your apps. but first let's go to client apps customization file and fill some parameters there. Open android folder in Android Studio 3.0+\n\n\nOptions\n\n\n\n\nTip\n\n\nTo find and open files faster in Android Studio you can use \nDouble Shift\n Hotkey.\n\n\n\n\n 1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25\nresources\n\n    \nstring\n \nname=\nserver_address\n \ntranslatable=\nfalse\nhttp://x.x.x.x:8080/\n/string\n\n    \nstring\n \nname=\nfabric_key\n \ntemplateMergeStrategy=\npreserve\n \ntranslatable=\nfalse\n/string\n\n    \nstring\n \nname=\nstripe_publishable_key\n \ntranslatable=\nfalse\n/string\n\n    \nstring\n \nname=\npayment_currency\n \ntranslatable=\nfalse\nusd\n/string\n\n    \nstring\n \nname=\ngoogle_maps_key\n \ntemplateMergeStrategy=\npreserve\n \ntranslatable=\nfalse\n/string\n\n    \nstring\n \nname=\ndefaultLocation\n \ntranslatable=\nfalse\n/string\n\n    \nstring\n \nname=\ntheme\n \ntranslatable=\nfalse\nAmaranth\n/string\n\n    \n!--string name=\ntestMode\n translatable=\nfalse\n/string--\n\n    \nbool\n \nname=\nis_call_request_enabled_driver\ntrue\n/bool\n\n    \nbool\n \nname=\nis_call_request_enabled_rider\ntrue\n/bool\n\n    \nbool\n \nname=\nis_direct_call_enabled_driver\ntrue\n/bool\n\n    \nbool\n \nname=\nis_direct_call_enabled_rider\ntrue\n/bool\n\n    \nbool\n \nname=\nuse_fixed_fee\ntrue\n/bool\n\n    \nbool\n \nname=\nauto_select_first_driver\nfalse\n/bool\n\n    \nbool\n \nname=\nshow_current_location_button\ntrue\n/bool\n\n    \nbool\n \nname=\nuse_custom_login\nfalse\n/bool\n\n    \nstring\n \nname=\nverification_address\n/string\n\n    \nstring\n \nname=\nverify_address\nfalse\n/string\n\n    \nbool\n \nname=\npayment_stripe_enabled\ntrue\n/bool\n\n    \nbool\n \nname=\npayment_web_enabled\ntrue\n/bool\n\n    \nstring\n \nname=\ncharge_first\n10\n/string\n\n    \nstring\n \nname=\ncharge_second\n20\n/string\n\n    \nstring\n \nname=\ncharge_third\n50\n/string\n\n\n/resources\n\n\n\n\n\n\n\nserver_address (Important)\n\n\nEnter external IP address+port of your server.\n\n\n\n\nExample\n\n\nThe value would look like this: \nhttp://8.8.8.8:8080/\n\n\n\n\ngoogle_maps_key (Important)\n\n\nYou will need to enter Google Maps API Key you have retrieved in previous section here.\n\n\n\n\nExample\n\n\nThe format should be like \n[lat],[lng]\n for example: \n40.1792,44.4991\n\n\n\n\nApplicationId\n\n\nIn previous sections you have selected an applicationId. now change the default applicationId to the one you have selected in each project's build.gradle file.", 
            "title": "Configuration"
        }, 
        {
            "location": "/client/config/index.html#configuration", 
            "text": "You are almost finished and ready to compile your apps. but first let's go to client apps customization file and fill some parameters there. Open android folder in Android Studio 3.0+", 
            "title": "Configuration"
        }, 
        {
            "location": "/client/config/index.html#options", 
            "text": "Tip  To find and open files faster in Android Studio you can use  Double Shift  Hotkey.    1\n 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20\n21\n22\n23\n24\n25 resources \n     string   name= server_address   translatable= false http://x.x.x.x:8080/ /string \n     string   name= fabric_key   templateMergeStrategy= preserve   translatable= false /string \n     string   name= stripe_publishable_key   translatable= false /string \n     string   name= payment_currency   translatable= false usd /string \n     string   name= google_maps_key   templateMergeStrategy= preserve   translatable= false /string \n     string   name= defaultLocation   translatable= false /string \n     string   name= theme   translatable= false Amaranth /string \n     !--string name= testMode  translatable= false /string-- \n     bool   name= is_call_request_enabled_driver true /bool \n     bool   name= is_call_request_enabled_rider true /bool \n     bool   name= is_direct_call_enabled_driver true /bool \n     bool   name= is_direct_call_enabled_rider true /bool \n     bool   name= use_fixed_fee true /bool \n     bool   name= auto_select_first_driver false /bool \n     bool   name= show_current_location_button true /bool \n     bool   name= use_custom_login false /bool \n     string   name= verification_address /string \n     string   name= verify_address false /string \n     bool   name= payment_stripe_enabled true /bool \n     bool   name= payment_web_enabled true /bool \n     string   name= charge_first 10 /string \n     string   name= charge_second 20 /string \n     string   name= charge_third 50 /string  /resources", 
            "title": "Options"
        }, 
        {
            "location": "/client/config/index.html#server_address-important", 
            "text": "Enter external IP address+port of your server.   Example  The value would look like this:  http://8.8.8.8:8080/", 
            "title": "server_address (Important)"
        }, 
        {
            "location": "/client/config/index.html#google_maps_key-important", 
            "text": "You will need to enter Google Maps API Key you have retrieved in previous section here.   Example  The format should be like  [lat],[lng]  for example:  40.1792,44.4991", 
            "title": "google_maps_key (Important)"
        }, 
        {
            "location": "/client/config/index.html#applicationid", 
            "text": "In previous sections you have selected an applicationId. now change the default applicationId to the one you have selected in each project's build.gradle file.", 
            "title": "ApplicationId"
        }, 
        {
            "location": "/client/translation/index.html", 
            "text": "Translation\n\n\nIn order to do the translation go to folder res of common project located at: \n/common/src/main/res/\n\nThere is a file named \nstrings.xml\n inside values folder copy the file and create a new values folder with your language id inside res folder then put this \nstrings.xml\n file inside it. now edit this \nstrings.xml\n file using any text editor of your choice. Now if users phone language is set to that language it will automatically choice that language for user.", 
            "title": "Translation"
        }, 
        {
            "location": "/client/translation/index.html#translation", 
            "text": "In order to do the translation go to folder res of common project located at:  /common/src/main/res/ \nThere is a file named  strings.xml  inside values folder copy the file and create a new values folder with your language id inside res folder then put this  strings.xml  file inside it. now edit this  strings.xml  file using any text editor of your choice. Now if users phone language is set to that language it will automatically choice that language for user.", 
            "title": "Translation"
        }, 
        {
            "location": "/dashboard/polymer/index.html", 
            "text": "Polymer\n\n\nPolymer is one of current leading front-end technologies like Angular, React, etc. Serving Admin panel is pretty easy and straight forward.\n\n\nConfiguration\n\n\nopen the \nmy-meta.xml\n file located in \nsrc\\elements\n folder using \nnano\n or any text editor of your choice. then change the server address value to your serverApp's address and port.\n\n\n\n\nExample\n\n\npolymer serve -H 8.8.8.8", 
            "title": "Install polymer"
        }, 
        {
            "location": "/dashboard/polymer/index.html#polymer", 
            "text": "Polymer is one of current leading front-end technologies like Angular, React, etc. Serving Admin panel is pretty easy and straight forward.", 
            "title": "Polymer"
        }, 
        {
            "location": "/dashboard/polymer/index.html#configuration", 
            "text": "open the  my-meta.xml  file located in  src\\elements  folder using  nano  or any text editor of your choice. then change the server address value to your serverApp's address and port.   Example  polymer serve -H 8.8.8.8", 
            "title": "Configuration"
        }, 
        {
            "location": "/dashboard/translation/index.html", 
            "text": "Translation\n\n\nTranslation file for dashboard is a JSON located in \ndata\n folder named \nlocales.json\n. Open the file and add a new JSON object structure to the end of it containing your language id.", 
            "title": "Translation"
        }, 
        {
            "location": "/dashboard/translation/index.html#translation", 
            "text": "Translation file for dashboard is a JSON located in  data  folder named  locales.json . Open the file and add a new JSON object structure to the end of it containing your language id.", 
            "title": "Translation"
        }, 
        {
            "location": "/faq/index.html", 
            "text": "FAQ\n\n\nSome of questions or problem that user might encounter.\n\n\nWhat kind of web panel i need?\n\n\nNothing. App is based on node so you won't need apache or any other PHP web-service like other websites. A virgin server is much preffered for this app because your resource won't be used for something that you don't need. but if you already have a VPS using for other stuffs you can still use this app given that you could update the version of MariaDB.\n\n\nServer/dashboard is not responding?\n\n\nMost of linux distros has a firewall implemented in themseleves. if the port for either dashboard or server app is blocked it won't be accessible for external use. you will need to open the port. For example opening port 8080 in ubuntu can be done like this: \nsudo ufw allow 22", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/index.html#faq", 
            "text": "Some of questions or problem that user might encounter.", 
            "title": "FAQ"
        }, 
        {
            "location": "/faq/index.html#what-kind-of-web-panel-i-need", 
            "text": "Nothing. App is based on node so you won't need apache or any other PHP web-service like other websites. A virgin server is much preffered for this app because your resource won't be used for something that you don't need. but if you already have a VPS using for other stuffs you can still use this app given that you could update the version of MariaDB.", 
            "title": "What kind of web panel i need?"
        }, 
        {
            "location": "/faq/index.html#serverdashboard-is-not-responding", 
            "text": "Most of linux distros has a firewall implemented in themseleves. if the port for either dashboard or server app is blocked it won't be accessible for external use. you will need to open the port. For example opening port 8080 in ubuntu can be done like this:  sudo ufw allow 22", 
            "title": "Server/dashboard is not responding?"
        }
    ]
}